Página inicial:

  - contem um botão de logar com conta google
  - informações sobre a ideia da aplicação

Usuario:
  - necessita ter informações de dias disponiveis para trabalho e horarios
  - necessita de ao menos um serviço*

Ao clicar no botão de "Entrar com Google", será validado:
   
  se (usuario não existi na base de dados) {
    regitrarusuario()
  } senao {
    logarusuario()
  }

funcao logarusuario() {
  se (usuariologado ja tiver registro de dias e servicos) {
    carregar pagina de dashboard
  } senao {
    verificarpassoqueusuarioparou()
  }
}

funcao verificarpassoqueusuarioparou(email) {
  type e tipida: 'register', 'schedule'
  
  se(email existir) {
    verificar na tabela de logs qual passo o usuario parou:
      tabela de logs
        id: uuid,
        user_id: string (unico) obrigatorio,
        type: typetipida obrigatorio,
        action: funcoes executadas obrigatorio,
        created_at: timestamp obrigatorio,
    
    se (log === 'registrarusuario') {
      navegarpararegistardiasdisponiveis
    } senao se (log === 'registrardiasdisponiveis') {
      navegarpararegistrarservicos
    } senao se (log === 'registrodeservicos') {
      navegarparadashboard
    }
  } senao {
    pedir a usuario para verificar informacoes e tentar login novamente
  }
}


# não seria uma boa opção realizar a abertura de uma janela para executar o login do usuário
# pois a aplicação é mais focada em mobile, e isso iria gerar alguns problemas
funcao registrarusuario() {
  primeira acao:
    login com conta google:
      se (conta do google estiver correta) {
        capturar os dados de {
          access_token,
          refresh_token,
          access_token_expires_at,
          email,
          name,
          profile -> null "apenas agora no inicio da aplicação"
        }
      } senao {
        informe que houve problemas no registro e retorno usuario para tela inicial
        informando problema num popup vermelho em caso de erro
      }
  
  segunda acao:
    ao capturar todos estes dados deve ser registrado no banco:
      usuarioregistrado = registrarusuarioembanco(usuario)

    se (usuarioregistrado) {
      navegue usuario para registrar dias disponiveis
    } else {
      informe que houve problemas no registro e retorno usuario para tela inicial
      informando problema num popup vermelho em caso de erro
    }
}

funcao registrarusuarioembanco(usuario: usuario) {
  **e necessario registrar o passo do usuário**
  salvar usuario na tabela users
    id: uuid
    name: string (opcional),
    email: string (unico e obrigatorio),
    refresh_token: string (obrigatorio),
    access_token: string (obrigatorio),
    access_token_expires_at: int (obrigatorio),
    created_at: timestamp (obrigatorio),
    updated_at: timestamp (obrigatorio)

  user_id = save()
  registrarlog('register', 'registrarusuario', user_id)
}

funcao registrarlog(type, action, user_id) {
  save(type, action, user_id)
}

tabelas:
  users:
    id: uuid (unico)
    name: string (opcional)
    email: string (unico e obrigatorio)
    refresh_token: string (obrigatorio)
    access_token: string (obrigatorio)
    access_token_expires_at: int (obrigatorio)
    created_at: timestamp (obrigatorio)
    updated_at: timestamp (updatedAt)
  
  logs:
    id: uuid (unico)
    user_id: string (linkado ao usuario)
    type: 'register || schedules' (obrigatorio)
    action: string (obrigatorio)
    created_at: timestamp (obrigatorio)

  schedules:
    id: uuid (unico)
    user_id: string (linkado ao usuario)
    day: string (obrigatorio)
    hour_start: string (obrigatorio)
    hour_end: string (obrigatorio)
    created_at: timestamp (obrigatorio)
    updated_at: timestamp (updatedAt)

  times_scheduled:
    id: uuid (unico)
    user_id: string (linkado ao usuario)
    appointment: timestamp (obrigatorio)
    service_id: string (linkado ao servico do usuario)
    name: string (opcional)
    email: string (obrigatorio)
    created_at: timestamp (obrigatorio)
    updated_at: timestamp (updatedAt)

  services:
    id: uuid (unico)
    name: string (obrigatorio)
    service_time_in_seconds: int (obrigatorio)
    user_id: string (linkado ao usuario)
    created_at: timestamp (obrigatorio)
    updated_at: timestamp (updatedAt)